services:
  db:
    image: postgres:16.4
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: homeworkmanager
    volumes:
      - db_data:/var/lib/postgresql/data

    networks:
      - backend

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis_data:/data

    networks:
      - backend

    restart: always

  goose:
    build:
      context: .
      dockerfile: ./migrations/Dockerfile
    environment:
      - POSTGRES_DB_NAME=homeworkmanager
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_SSLMODE=disable
      - POSTGRES_USER=${POSTGRES_USER}
    networks:
      - backend

    depends_on:
      db:
        condition: service_healthy


  nginx:
    image: nginx:latest
    networks:
      - backend
      - frontend
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx.conf:/etc/nginx/sites-enabled/nginx.conf
    ports:
      - "80:80"



  backend:
    image: ghcr.io/homeworkmanager/backend:${BACKEND_TAG:-latest}
    build:
      context: .
    environment:
      - AUTH_TTL=1500s
      - DOMAIN=localhost
      - ENCODING_MODE=console
      - HOST=0.0.0.0
      - PORT=8888
      - FRONTEND_HOST=localhost
      - FRONTEND_PORT=3000
      - POSTGRES_CONNECT_TIMEOUT=5
      - POSTGRES_DB_NAME=homeworkmanager
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_SSLMODE=disable
      - POSTGRES_USER=${POSTGRES_USER}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      goose:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    networks:
      - backend

    restart: always

  frontend:
    image: ghcr.io/homeworkmanager/frontend:${FRONTEND_TAG:-latest}
    networks:
      - frontend
      - backend
    depends_on:
      - backend


volumes:
  db_data:
  redis_data:


networks:
  backend:
  frontend:

